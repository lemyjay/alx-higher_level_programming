# Test cases for matrix_mul function

# run test using python3 -m doctest -v ./tests/100-matrix_mul.txt 

#importing module
>>> matrix_mul = __import__("100-matrix_mul").matrix_mul


SUCCESS CASES:

# Right input type and valid matrices
>>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]])
[[19, 22], [43, 50]]

# Valid matrices with negative numbers
>>> matrix_mul([[-1, 2], [3, -4]], [[-5, 6], [7, -8]])
[[19, -22], [-43, 50]]

# Valid input: matrices that can be multiplied
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[5, 6], [7, 8]]
>>> matrix_mul(m_a, m_b)
[[19, 22], [43, 50]]

# Valid input: matrices with floats
>>> m_a = [[1.0, 2.5], [3.5, 4.0]]
>>> m_b = [[5.0, 6.5], [7.5, 8.0]]
>>> matrix_mul(m_a, m_b)
[[23.75, 26.5], [47.5, 54.75]]

# Valid input: matrices with negative numbers
>>> m_a = [[-1, -2], [-3, -4]]
>>> m_b = [[5, 6], [7, 8]]
>>> matrix_mul(m_a, m_b)
[[-19, -22], [-43, -50]]

# Valid input: matrices with zeros
>>> m_a = [[0, 0], [0, 0]]
>>> m_b = [[5, 6], [7, 8]]
>>> matrix_mul(m_a, m_b)
[[0, 0], [0, 0]]


FAIL CASES:

# Edge case: empty matrices
>>> matrix_mul([], [])
Traceback (most recent call last):
...
ValueError: m_a can't be empty

>>> matrix_mul([[1, 2], [3, 4]], [])
Traceback (most recent call last):
...
ValueError: m_b can't be empty

# Wrong input type
>>> matrix_mul()
Traceback (most recent call last):
...
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

>>> matrix_mul([[1, 2], [3, 4]])
Traceback (most recent call last):
...
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]], [[1, 2], [3, 4]])
Traceback (most recent call last):
...
TypeError: matrix_mul() takes 2 positional arguments but 3 were given

>>> matrix_mul([[1, 2], [3, 4]], "")
Traceback (most recent call last):
...
TypeError: m_b must be a list

>>> matrix_mul("", [[1, 2], [3, 4]])
Traceback (most recent call last):
...
TypeError: m_a must be a list

# Matrices with invalid elements
>>> matrix_mul([[1, 2], [3, "four"]], [[5, 6], [7, 8]])
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats

>>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, "eight"]])
Traceback (most recent call last):
...
TypeError: m_b should contain only integers or floats

# Non-rectangular matrices
>>> matrix_mul([[1, 2], [3, 4, 5]], [[5, 6], [7, 8]])
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size

>>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7]])
Traceback (most recent call last):
...
TypeError: each row of m_b must be of the same size

# Matrices that can't be multiplied
>>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8], [9, 10]])
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied

# Invalid input: m_a is not a list (invalid)
>>> m_a = "not_a_list"
>>> m_b = [[5, 6], [7, 8]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
TypeError: m_a must be a list

# Invalid input: m_b is not a list (invalid)
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = "not_a_list"
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
TypeError: m_b must be a list

# Invalid input: m_a contains a non-number (invalid)
>>> m_a = [[1, 2], ["three", 4]]
>>> m_b = [[5, 6], [7, 8]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
TypeError: m_a should contain only integers or floats

# Invalid input: m_b contains a non-number (invalid)
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[5, 6], [7, "eight"]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
TypeError: m_b should contain only integers or floats

# Invalid input: m_a is empty (invalid)
>>> m_a = []
>>> m_b = [[5, 6], [7, 8]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: m_a can't be empty

# Invalid input: m_b is empty (invalid)
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = []
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: m_b can't be empty

# Invalid input: matrices with incompatible sizes (invalid)
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[5, 6, 7], [8, 9, 10]]
>>> matrix_mul(m_a, m_b)
[[21, 24, 27], [47, 54, 61]]